# В google colab добавить: !pip install pyTelegramBotAPI
# Чтобы добавить новое слово — нужно его прописать в массиве DEFINITOINS на 11 строчке
# Важно все новые аббривиатуры в коде писать только с маленьких букв
# Пользователь в телеграм может писать и с большой и с маленькой — код всегда приводит к строчным

from telebot import TeleBot, types

bot = TeleBot(token='5473528330:AAEROf4_y-NmkqK7rdd9DX3V4e8u4vqu1Yw', parse_mode='html') # создание бота

# словарь с определениями и аббревиатурами, которые знает бот
# в формате:
# 'ключевая фраза': 'соответствующее ей определение'
DEFINITOINS = {
    'где я': 'Команда pwd:\npwd   ---мы ввели команду\n/home/test   ---ответ системы, мы находимя в домашней директории пользователя test',
    'что в папке': 'Команда ls:\nls   ---мы ввели команду\nlogapp.txt\nlogapp_01-03-2020.txt\nlogapp_02-03-2020.txt\nlogapp_02-07-2020.txt   ---ответ системы, показывает что находится в папке',
    'директория': 'Команда cd:\ncd   ---мы ввели команду\ncd (путь к директории)   ---ответ системы',
    'абсолютный путь': 'Либо у вас где-то записан путь, «куда идти», либо вы подсмотрели его в графическом интерфейсе\nВставляем путь в командную строку после «cd»\ncd /home/student/log\nНу вот, мы переместились из домашней директории (обозначается как ~) в /home/student/log.',
    'относительный путь': 'Относительный путь — относительно вашей текущей директории, где вы сейчас находитесь. Если я уже нахожусь в /home/student, а мне надо в /home/student/log, команда будет такой:\ncd log  --- перейди в папку log из той директории, где ты сейчас находишься\nЕсли мне надо из /home/student/photo в /home/student/photo/city/msk/2017/cat_1, команда будет такой:\ncd city/msk/2017/cat_1\nЯ не пишу /home/student/photo, так как я уже там.',
    'автодополнение': 'Если вы начнете набирать название папки и нажмете Tab, система сама его подставит. Если просто нажмете Tab, ничего не вводя, система начнет перебирать возможные варианты:\n— (cd tab) Может, ты имел в виду папку 1?\n— (tab) Нет? Может, папку 2?\n— (tab) Снова нет? Может, папку 3?\n— (tab) Снова нет? Может, файл 1 (она перебирает имена всех файлов и директорий, которые есть в той, где вы сейчас находитесь)?\n— (tab) У меня кончились варианты, поехали сначала. Папка 1?\ncd lon(Tab) → cd long-long-long-long-name-folder — начали вводить название папки и система сама подставила имя (из тех, что есть в директории, где мы находимся).\ncd (Tab)(Tab)(Tab) — система перебирает все файлы / папки в текущей директории.',
    'подняться': 'cd ..\nЕсли нужно поднять на два уровня выше, то\ncd ../..\nОбратите внимание, что команда для линукса отличается от команды для винды — слеш другой. В винде это «cd ..\..», а в линуксе именно «cd ../..».',
    'создать директорию': 'Используйте команду mkdir:\nmkdir test  --- создает папку с названием «test» там, где вы находитесь\nМожно и в другом месте создать папку:\nmkdir /home/test   --- создает папку «test» в директории /home, даже если вы ',
    'создать файл': 'Командой touch:\ntouch app.log\nТакая команда создаст пустой файл с названием «app.log». А потом уже можно открыть файл в редакторе и редактировать.',
    'отредоктировать файл': 'nano — более простая программа, рассчитана на новичков\nnano test_env.json\nvim — более сложная, но позволяет сделать кучу всего\nvim test_env.json',
    'скопировать файл': 'Команда cp:\ncp что_копировать куда_копировать\nЕсли мы находимся в директории /opt/app/log:\ncp app.log /home/olga\nМожно сразу переименовать файл:\ncp app.log /home/olga/app_test_2020_03_08.log',
    'скопировать директорию': 'Команда остается та же, «cp», только используется ключ R — «копировать папку рекурсивно»:\ncp -r  путь_к_папке  путь_к_новому_месту\nНапример:\ncp /opt/app/log /home/olga\nТак в директории /home/olga появится папка «log».',
    'переместить файл': 'Если надо переместить файл, а не скопировать его, то вместо cp (copy) используем mv (move).\ncp app.log /home/olga\n↓\nmv app.log /home/olga\nМожно использовать относительные и абсолютные пути:\nmv /opt/app/logs/app.log /home/olga — абсолютные пути указаны, команда сработает из любого места\nМожно сразу переименовать файл:\nmv app.log /home/olga/app_2020_03_08.log — перенесли лог в /home/olga и переименовали',
    'переместить директорию': 'Аналогично перемещению файла, команда mv\nmv /opt/app/log/  /home/olga/bakup/',
    'удалить файл': 'С помощью команды rm (remove):\nЕсли нужно удалить все файлы в текущей директории (скажем, вычищаем старые логи перед переустановкой приложения), используйте «*»:\nrm *  — удалит все файлы в текущей директории\nЕсли нужно удалить папку, надо добавить флаг -r (recursive):\nrm -r test_folder\nОпция -v показывает имена удаляемых файлов:\nrm -rfv test_folder   --- удалит папку со всем содержимым, но выведет имена удаляемых файлов',
    'изменить владельца файла': 'Если у вас есть root-доступ, то вы наверняка будете выполнять все действия под ним. Ну или многие… И тогда любой созданный файл, любая папка будут принадлежать root-пользователю.\nchown testbase:testbase test.txt — сменить владельца файла\nchown -R testbase:testbase user     — сменить владельца папки',
    'установить приложение': 'тут его определение',
    'запустить приложение': 'тут его определение',
    'где установлено приложение': 'Чтобы узнать, куда приложение установилось, используйте whereis (без пробела):\nwhereis newman',
    'создать архив': 'Стандартная утилита, которая будет работать даже на «голой» системе — tar. Правда, для ее использования надо запомнить флаги. Для создания архива стандартная комбинация cvzf:\ntar -cvzf archive.tar.gz /home/test',
    'использованные ранее команды': '↑  (стрелочка «наверх») — показать последнюю команду\nhistory — показать последние 1000 команд',
    'свободное место': 'Сколько места свободно на дисках\ndf -h\nСколько весит директория\ndu -sh\ndu -sh *  --- с разбиением',
    'айпи компьютера': 'Чтобы узнать IP машины, используйте команду:\nhostname -I\nТакже можно использовать ifconfig:\nifconfig — выведет кучу инфы, в том числе ваш внешний IP\nip a — аналог, просто иногда Ifconfig дает очень много результата, тут поменьше будет',
    'версия оси': 'Используйте команду:\ncat /etc/*-release\nЕсли нужна версия ядра:\nuname -a',
    'как работает команда': 'Если вы не знаете, как работает команда, всегда можно спросить о ней саму систему, используя встроенную команду man:\nman ls\nЕсли man у программы нет, используйте флаг -h (--help):\nls -h',
    'тестовый файл': 'Допустим, у нас есть некая папка test. Создадим в ней сотню директорий и кучу файликов в каждой:\nmkdir -p test/dir--{000..100}\ntouch test/dir--{000..100}/file-{A..Z}\nmkdir — создать директорию\ntouch — создать файл (или изменить существующий, но если файла с таким именем нет, то команда создаст новый, пустой)\n{000..100} — пробежится по всем числам от 0 до 100\n{A..Z} — пробежится по всем буквам английского алфавита от A до Z',
    
}

# обработчик команды '/start'
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("👤Обо мне")
    btn2 = types.KeyboardButton("📜Инструкция")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, text="Привет, {0.first_name}! Я бот-справочник🤖\nДля того что бы найти нужную команду, нажми на кнопку\n📜Инстукция".format(message.from_user), reply_markup=markup)
    # отправляем ответ на команду '/start'
   

# обработчик всех остальных сообщений
@bot.message_handler(content_types=['text'])
def func(message):
    if(message.text == "👤Обо мне"):
        bot.send_message(message.chat.id, text="Будем знакомиться, меня зовут Никита, мне 24 года\nvk - https://vk.com/amakoffn\ntelegram - https://t.me/amakoff\ngithub - https://github.com/Amakoff")
    if(message.text == "📜Инструкция"):
        bot.send_message(message.chat.id, text="Для того что бы найти команду, пропиши ключевое слово из примера ниже⬇ТЕРМИН  ---  КЛЮЧЕВОЕ СЛОВО\nГде я? Как понять, где находишься  ---  где я\nКак понять, что находится в папке  ---  что в папке\nКак перейти в другую директорию  ---  директория\nПо абсолютному пути  ---  абсолютный путь\nПо относительному пути  ---  относительный путь\nС автодополнением  ---  автодополнение\nПодняться наверх  ---  подняться\nКак создать директорию  ---  создать директорию\nКак создать файл  ---  создать файл\nКак отредактировать файл  ---  отредоктировать файл\nСкопировать файл  ---  скопировать файл\nСкопировать директорию  ---  скопировать директорию\nПереместить файл  ---  переместить файл\nПереместить директорию  ---  переместить директорию\nКак удалить файл  ---  удалить файл\nКак изменить владельца файла  ---  изменить владельца файла\nКак установить приложение  ---  где установлено приложение\nКак создать архив  ---  создать архив\nКак посмотреть использованные ранее команды  ---  использованные ранее команды\nКак посмотреть свободное место  ---  свободное место\nКак узнать IP компьютера  ---  айпи компьютера\nКак узнать версию OS  ---  версия оси\nКак узнать, как работает команда  ---  как работает команда\nКак создать много тестовых папок и файлов  ---  тестовый файл") 

    # пробуем найти ключевую фразу в словаре
    definition = DEFINITOINS.get(
        message.text.lower(), # приводим текст сообщения к нижнему регистру
    )
    # если фразы нет в словаре, то переменная definition будет иметь значение None
    # проверяем это условие
    if definition is None:
        # если ключевая фраза не была найдена в словаре
        # отправляем ответ
        bot.send_message(
            chat_id=message.chat.id,
            text='',
        )
        # выходим из функции
        return
    
    # если ключевая фраза была найдена, формируем текст сообщения и отправляем его
    # если перед строкой поставить букву f, то в фигурных скобках {} можно использовать переменные :)
    bot.send_message(
        chat_id=message.chat.id,
        text=f'Определение:\n<code>{definition}</code>',
    )

    bot.send_message(
        chat_id=message.chat.id,
        text=f'Жду следующий термин',
    )


# главная функция программы
def main():
    # запускаем нашего бота
    bot.infinity_polling()


if __name__ == '__main__':
    main()